#!/bin/bash
# This script is used to configure and run Consul on a Google Compute Instance.

set -e

# Include general-purpose bash functions from https://github.com/gruntwork-io/bash-commons. Assumes these were installed
# separately from this script, for example, using "cd /opt/gruntwork && git clone https://github.com/gruntwork-io/bash-commons".
source "/opt/gruntwork/bash-commons/assert.sh"
source "/opt/gruntwork/bash-commons/log.sh"
source "/opt/gruntwork/bash-commons/string.sh"

# In bash, we can't distinguish between the empty string, and no value at all, so we create our own unambiguous empty string.
readonly EMPTY_VAL="__EMPTY__"

readonly CONSUL_CONFIG_FILE="default.json"
readonly SUPERVISOR_CONFIG_PATH="/etc/supervisor/conf.d/run-consul.conf"

readonly COMPUTE_INSTANCE_METADATA_URL="http://metadata.google.internal/computeMetadata/v1"
readonly GOOGLE_CLOUD_METADATA_REQUEST_HEADER="Metadata-Flavor: Google"
readonly CLUSTER_SIZE_INSTANCE_METADATA_KEY_NAME="cluster-size"

readonly DEFAULT_RAFT_PROTOCOL="3"

readonly DEFAULT_AUTOPILOT_CLEANUP_DEAD_SERVERS="true"
readonly DEFAULT_AUTOPILOT_LAST_CONTACT_THRESHOLD="200ms"
readonly DEFAULT_AUTOPILOT_MAX_TRAILING_LOGS="250"
readonly DEFAULT_AUTOPILOT_SERVER_STABILIZATION_TIME="10s"
readonly DEFAULT_AUTOPILOT_REDUNDANCY_ZONE_TAG="az"
readonly DEFAULT_AUTOPILOT_DISABLE_UPGRADE_MIGRATION="false"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: run-consul [OPTIONS]"
  echo
  echo "This script is used to configure and run Consul on a Google Compute Instance."
  echo
  echo "Required Arguments:"
  echo
  echo -e "  --server\t\tIf set, run in server mode. Exactly one of --server or --client must be set."
  echo -e "  --client\t\tIf set, run in client mode. Exactly one of --server or --client must be set."
  echo
  echo "Optional Arguments:"
  echo
  echo -e "  --cluster-tag-name\tAutomatically form a cluster with Instances that have the same value for this Compute Instance tag name."
  echo -e "  --raft-protocol\tThis controls the internal version of the Raft consensus protocol used for server "
  echo -e "                 \tcommunications. Must be set to 3 in order to gain access to Autopilot features, with the"
  echo -e "                 \texception of cleanup_dead_servers. Default: $DEFAULT_RAFT_PROTOCOL"
  echo -e "  --config-dir\t\tThe path to the Consul config folder. Default is the absolute path of '../config', relative to this script."
  echo -e "  --data-dir\t\tThe path to the Consul data folder. Default is the absolute path of '../data', relative to this script."
  echo -e "  --log-dir\t\tThe path to the Consul log folder. Default is the absolute path of '../log', relative to this script."
  echo -e "  --bin-dir\t\tThe path to the folder with Consul binary. Default is the absolute path of the parent folder of this script."
  echo -e "  --user\t\tThe user to run Consul as. Default is to use the owner of --config-dir."
  echo -e "  --skip-consul-config\tIf this flag is set, don't generate a Consul configuration file. Default is false."
  echo -e "  --encrypt-key\t\tConsul encryption key. Default is empty string, which means no encryption key is used."
  echo
  echo "Options for Consul Autopilot:"
  echo
  echo -e "  --autopilot-cleanup-dead-servers\tSet to true or false to control the automatic removal of dead server nodes periodically and whenever a new server is added to the cluster. Defaults to $DEFAULT_AUTOPILOT_CLEANUP_DEAD_SERVERS. Optional."
  echo -e "  --autopilot-last-contact-threshold\tControls the maximum amount of time a server can go without contact from the leader before being considered unhealthy. Must be a duration value such as 10s. Defaults to $DEFAULT_AUTOPILOT_LAST_CONTACT_THRESHOLD. Optional."
  echo -e "  --autopilot-max-trailing-logs\t\tControls the maximum number of log entries that a server can trail the leader by before being considered unhealthy. Defaults to $DEFAULT_AUTOPILOT_MAX_TRAILING_LOGS. Optional."
  echo -e "  --autopilot-server-stabilization-time\tControls the minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster. Only takes effect if all servers are running Raft protocol version 3 or higher. Must be a duration value such as 30s. Defaults to $DEFAULT_AUTOPILOT_SERVER_STABILIZATION_TIME. Optional."
  echo -e "  --autopilot-redundancy-zone-tag\t\t(Enterprise-only) This controls the -node-meta key to use when Autopilot is separating servers into zones for redundancy. Only one server in each zone can be a voting member at one time. If left blank, this feature will be disabled. Defaults to $DEFAULT_AUTOPILOT_REDUNDANCY_ZONE_TAG. Optional."
  echo -e "  --autopilot-disable-upgrade-migration\t(Enterprise-only) If this flag is set, this will disable Autopilot's upgrade migration strategy in Consul Enterprise of waiting until enough newer-versioned servers have been added to the cluster before promoting any of them to voters. Defaults to $DEFAULT_AUTOPILOT_DISABLE_UPGRADE_MIGRATION. Optional."
  echo -e "  --autopilot-upgrade-version-tag\t\t(Enterprise-only) That tag to be used to override the version information used during a migration. Optional."
  echo
  echo "Example:"
  echo
  echo "  run-consul --server --cluster-tag-name consul-xyz --config-dir /custom/path/to/consul/config"
}

# Get the value at a specific Instance Metadata path.
function get_instance_metadata_value {
  local -r path="$1"

  log_info "Looking up Metadata value at $COMPUTE_INSTANCE_METADATA_URL/$path"
  curl --silent --show-error --location --header "$GOOGLE_CLOUD_METADATA_REQUEST_HEADER" "$COMPUTE_INSTANCE_METADATA_URL/$path"
}

# Get the value of the given Custom Metadata Key
function get_instance_custom_metadata_value {
  local -r key="$1"

  log_info "Looking up Custom Instance Metadata value for key \"$key\""
  get_instance_metadata_value "instance/attributes/$key"
}

# Get the ID of the Project in which this Compute Instance currently resides
function get_instance_project_id {
  log_info "Looking up Project ID"
  get_instance_metadata_value "project/project-id"
}

# Get the GCE Region in which this Compute Instance currently resides
function get_instance_region {
  log_info "Looking up Region of the current Compute Instance"

  # The value returned for zone will be of the form "projects/121238320500/zones/us-west1-a" so we need to split the string
  # by "/" and return the 4th string.
  # Then we split again by '-' and return the first two fields.
  # from 'europe-west1-b' to 'europe-west1'
  get_instance_metadata_value "instance/zone" | cut -d'/' -f4 | awk -F'-' '{ print $1"-"$2 }'
}

# Get the ID of the current Compute Instance
function get_instance_name {
  log_info "Looking up current Compute Instance name"
  get_instance_metadata_value "instance/name"
}

# Get the IP Address of the current Compute Instance
function get_instance_ip_address {
  local network_interface_number="$1"

  # If no network interface number was specified, default to the first one
  if [[ -z "$network_interface_number" ]]; then
    network_interface_number=0
  fi

  log_info "Looking up Compute Instance IP Address on Network Interface $network_interface_number"
  get_instance_metadata_value "instance/network-interfaces/$network_interface_number/ip"
}

function generate_consul_config {
  local -r server="$1"
  local -r raft_protocol="$2"
  local -r config_dir="$3"
  local -r user="$4"
  local -r cluster_tag_name="$5"
  local -r cluster_size_instance_metadata_key_name="$6"
  local -r encrypt_key="$7"
  local -r cleanup_dead_servers="$8"
  local -r last_contact_threshold="$9"
  local -r max_trailing_logs="${10}"
  local -r server_stabilization_time="${11}"
  local -r redundancy_zone_tag="${12}"
  local -r disable_upgrade_migration="${13}"
  local -r upgrade_version_tag=${14}
  local -r config_path="$config_dir/$CONSUL_CONFIG_FILE"

  local instance_ip_address=""
  local instance_name=""
  local project_id=""
  local retry_join_key_val=""
  local bootstrap_expect_key_val=""
  local encrypt_key_val=""

  instance_ip_address=$(get_instance_ip_address)
  instance_name=$(get_instance_name)
  instance_region=$(get_instance_region)
  project_id=$(get_instance_project_id)

  if [[ -z "$cluster_tag_name" ]]; then
    log_warn "The --cluster-tag-name property is empty. Will not automatically try to form a cluster based on Cluster Tag Name."
  else
    retry_join_key_val="\"retry_join\": [\"provider=gce project_name=$project_id tag_value=$cluster_tag_name\"],"
  fi

  if [[ "$server" == "true" ]]; then
    local cluster_size=""

    cluster_size=$(get_instance_custom_metadata_value "$cluster_size_instance_metadata_key_name")
    bootstrap_expect_key_val="\"bootstrap_expect\": $cluster_size,"
  fi

  if [[ "$encrypt_key" != "$EMPTY_VAL" ]]; then
    encrypt_key_val="\"encrypt\": \"$encrypt_key\","
  fi

  if [[ -z "$datacenter_override" ]]; then
    datacenter="$instance_region"
  else
    datacenter="$datacenter_override"
  fi

  local autopilot_configuration=$(cat <<EOF
"autopilot": {
  "cleanup_dead_servers": $cleanup_dead_servers,
  "last_contact_threshold": "$last_contact_threshold",
  "max_trailing_logs": $max_trailing_logs,
  "server_stabilization_time": "$server_stabilization_time",
  "redundancy_zone_tag": "$redundancy_zone_tag",
  "disable_upgrade_migration": $disable_upgrade_migration,
  "upgrade_version_tag": "$upgrade_version_tag"
},
EOF
)

  log_info "Creating default Consul config file in $config_path"
  cat > "$config_path" <<EOF
{
  "advertise_addr": "$instance_ip_address",
  "bind_addr": "$instance_ip_address",
  $bootstrap_expect_key_val
  "client_addr": "0.0.0.0",
  "datacenter": "$datacenter",
  "node_name": "$instance_name",
  $retry_join_key_val
  "server": $server,
  $autopilot_configuration
  "ui": true,
  $encrypt_key_val
  "raft_protocol": $raft_protocol
}
EOF
  chown "$user:$user" "$config_path"
}

function generate_supervisor_config {
  local -r supervisor_config_path="$1"
  local -r consul_config_dir="$2"
  local -r consul_data_dir="$3"
  local -r consul_log_dir="$4"
  local -r consul_bin_dir="$5"
  local -r consul_user="$6"

  local consul_user_home_dir=""
  consul_user_home_dir="$(get_owner_home_dir $consul_user)"

  log_info "Creating Supervisor config file to run Consul in $supervisor_config_path"
  cat > "$supervisor_config_path" <<EOF
[program:consul]
command=$consul_bin_dir/consul agent -config-dir $consul_config_dir -data-dir $consul_data_dir
stdout_logfile=$consul_log_dir/consul-stdout.log
stderr_logfile=$consul_log_dir/consul-error.log
numprocs=1
autostart=true
autorestart=true
stopsignal=INT
user=$consul_user
# Per Supervisord docs (http://supervisord.org/configuration.html), when supervisord runs a process it does not start a
# login shell and does not change environment variables like USER or HOME, so we must pass this in manually.
environment=HOME="$consul_user_home_dir"
EOF
}

function start_consul {
  log_info "Reloading Supervisor config and starting Consul"
  supervisorctl reread
  supervisorctl update
}

# Based on: http://unix.stackexchange.com/a/7732/215969
function get_owner_of_path {
  local -r path="$1"
  ls -ld "$path" | awk '{print $3}'
}

function get_owner_home_dir {
  local -r user="$1"

  local home_dir=""
  home_dir=$(sudo su - $user -c 'echo $HOME')

  if [[ "$home_dir" == "/" ]]; then
    log_error "No \$HOME directory is set for user $user. This may cause unpredictable behavior with Consul in GCP. Exiting."
    exit 1
  fi

  echo "$home_dir"
}

function run {
  local server="false"
  local client="false"
  local raft_protocol="$DEFAULT_RAFT_PROTOCOL"
  local cluster_tag_name=""
  local config_dir=""
  local data_dir=""
  local log_dir=""
  local bin_dir=""
  local user=""
  local datacenter_override=""
  local skip_consul_config="false"
  local encrypt_key="$EMPTY_VAL"
  local cleanup_dead_servers="$DEFAULT_AUTOPILOT_CLEANUP_DEAD_SERVERS"
  local last_contact_threshold="$DEFAULT_AUTOPILOT_LAST_CONTACT_THRESHOLD"
  local max_trailing_logs="$DEFAULT_AUTOPILOT_MAX_TRAILING_LOGS"
  local server_stabilization_time="$DEFAULT_AUTOPILOT_SERVER_STABILIZATION_TIME"
  local redundancy_zone_tag="$DEFAULT_AUTOPILOT_REDUNDANCY_ZONE_TAG"
  local disable_upgrade_migration="$DEFAULT_AUTOPILOT_DISABLE_UPGRADE_MIGRATION"
  local all_args=()

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --server)
        server="true"
        ;;
      --client)
        client="true"
        ;;
      --cluster-tag-name)
        assert_not_empty "$key" "$2"
        cluster_tag_name="$2"
        shift
        ;;
      --raft-protocol)
        assert_not_empty "$key" "$2"
        raft_protocol="$2"
        shift
        ;;
      --config-dir)
        assert_not_empty "$key" "$2"
        config_dir="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --log-dir)
        assert_not_empty "$key" "$2"
        log_dir="$2"
        shift
        ;;
      --bin-dir)
        assert_not_empty "$key" "$2"
        bin_dir="$2"
        shift
        ;;
      --user)
        assert_not_empty "$key" "$2"
        user="$2"
        shift
        ;;
      --encrypt-key)
        encrypt_key="$2"
        shift
        ;;
      --datacenter-override)
        datacenter_override="$2"
        shift
        ;;
      --autopilot-cleanup-dead-servers)
        assert_not_empty "$key" "$2"
        cleanup_dead_servers="$2"
        shift
        ;;
      --autopilot-last-contact-threshold)
        assert_not_empty "$key" "$2"
        last_contact_threshold="$2"
        shift
        ;;
      --autopilot-max-trailing-logs)
        assert_not_empty "$key" "$2"
        max_trailing_logs="$2"
        shift
        ;;
      --autopilot-server-stabilization-time)
        assert_not_empty "$key" "$2"
        server_stabilization_time="$2"
        shift
        ;;
      --autopilot-redundancy-zone-tag)
        assert_not_empty "$key" "$2"
        redundancy_zone_tag="$2"
        shift
        ;;
      --autopilot-disable-upgrade-migration)
        disable_upgrade_migration="true"
        shift
        ;;
      --autopilot-upgrade-version-tag)
        assert_not_empty "$key" "$2"
        upgrade_version_tag="$2"
        shift
        ;;
      --skip-consul-config)
        skip_consul_config="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ ("$server" == "true" && "$client" == "true") || ("$server" == "false" && "$client" == "false") ]]; then
    log_error "Exactly one of --server or --client must be set."
    exit 1
  fi

  assert_is_installed "supervisorctl"
  assert_is_installed "curl"

  if [[ -z "$config_dir" ]]; then
    config_dir=$(cd "$SCRIPT_DIR/../config" && pwd)
  fi

  if [[ -z "$data_dir" ]]; then
    data_dir=$(cd "$SCRIPT_DIR/../data" && pwd)
  fi

  if [[ -z "$log_dir" ]]; then
    log_dir=$(cd "$SCRIPT_DIR/../log" && pwd)
  fi

  if [[ -z "$bin_dir" ]]; then
    bin_dir=$(cd "$SCRIPT_DIR/../bin" && pwd)
  fi

  if [[ -z "$user" ]]; then
    user=$(get_owner_of_path "$config_dir")
  fi

  if [[ "$skip_consul_config" == "true" ]]; then
    log_info "The --skip-consul-config flag is set, so will not generate a default Consul config file."
  else
    generate_consul_config \
        "$server" \
        "$raft_protocol" \
        "$config_dir" \
        "$user" \
        "$cluster_tag_name" \
        "$CLUSTER_SIZE_INSTANCE_METADATA_KEY_NAME" \
        "$encrypt_key" \
        "$cleanup_dead_servers" \
        "$last_contact_threshold" \
        "$max_trailing_logs" \
        "$server_stabilization_time" \
        "$redundancy_zone_tag" \
        "$disable_upgrade_migration" \
        "$upgrade_version_tag"
  fi

  generate_supervisor_config "$SUPERVISOR_CONFIG_PATH" "$config_dir" "$data_dir" "$log_dir" "$bin_dir" "$user"
  start_consul
}

run "$@"
